<?php
declare(strict_types = 1);
namespace hexydec\html;

class script implements token {

	/**
	 * @var htmldoc The parent htmldoc object
	 */
	protected $root;

	/**
	 * @var string A string containing javascript
	 */
	protected $content = '';

	/**
	 * Constructs the script object
	 *
	 * @param htmldoc $root The parent htmldoc object
	 */
	public function __construct(htmldoc $root) {
		$this->root = $root;
	}

	/**
	 * Parses an array of tokens into an HTML documents
	 *
	 * @param array &$tokens An array of tokens generated by tokenise()
	 * @param array $config An array of configuration options
	 * @return void
	 */
	public function parse(tokenise $tokens) : void {
		if (($token = $tokens->current()) !== null) {
			$value = '';

			// note that if you have a Javascript string with </script> in it, this will incorrectly close the capture
			// the only way to mitigate this would be to correctly parse the javascript, which would be too complex and slow
			// the input javascript can be changed to "</scr" + "ipt>"
			while ($token !== null && ($token['type'] != 'tagclose' || $token['value'] != '</script>')) {
				if ($token['type'] == 'cdata') {
					$value .= mb_substr($token['value'], 9, -3);
				} else {
					$value .= $token['value'];
				}
				$token = $tokens->next();
			}
			$tokens->prev();
			if ($value) {
				$this->content = $value;
			}
		}
	}

	/**
	 * Minifies the internal representation of the script using an external minifier
	 *
	 * @param array $minify An array of minification options controlling which operations are performed
	 * @return void
	 */
	public function minify(array $minify) : void {
		if (!isset($minify['script']) || $minify['script'] !== false) {
			$this->content = trim($this->content);
			if ($this->content) {
				$func = $this->root->getConfig('custom', 'script', 'config', 'minifier');
				if ($func) {
					$this->content = call_user_func($func, $this->content, $minify['script']);
				}
			}
		}
	}

	/**
	 * Compile the scripts as an HTML string
	 *
	 * @param array $options An array indicating output options
	 * @return string The compiled HTML
	 */
	public function html(array $options = []) : string {
		return $options['xml'] ? '<![CDATA['.$this->content.']]>' : $this->content;
	}
}
